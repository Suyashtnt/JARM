# This workflow will build a Java project with Gradle	
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle	

name: Java CI with Gradle	

on:	
  push:	
    branches: [ master ]	
  pull_request:	
    branches: [ master ]	

jobs:	
  build:	

    runs-on: ubuntu-latest	

    steps:	
    - uses: travisj/build-number-action@v1
      id: my-project-build-number
    - uses: actions/checkout@v2	
      
    - name: Create a Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # The name of the tag. This should come from the webhook payload, `github.GITHUB_REF` when a user pushes a new tag
        tag_name: ${{ steps.my-project-build-number.outputs.build-number }}
        # The name of the release. For example, `Release v1.0.1`
        release_name: version {{ steps.my-project-build-number.outputs.build-number }}
        # Text describing the contents of the tag.
        body: creator still needs to make one
        # `true` to identify the release as a prerelease. `false` to identify the release as a full release. Default: `false`
        prerelease: true
        
    - name: Set up JDK 1.8	
      uses: actions/setup-java@v1	
      with:	
        java-version: 1.8	
    
    - name: Echo file name
      run: echo  build/libs/JARM-{{ steps.my-project-build-number.outputs.build-number }}.jar
      env:
        BUILD_NUMBER: ${{ steps.my-project-build-number.outputs.build-number }}
          
    - name: Grant execute permission for gradlew	
      run: chmod +x gradlew	
      
    - name: Build with Gradle	
      run: ./gradlew build
      
    - name: rename file
      env:
        TIME: "${{ steps.current-time.outputs.formattedTime }}"
      run: mv build/libs/modid-1.0.jar build/libs/JARM-{{ steps.my-project-build-number.outputs.build-number }}.jar
      
    - name: Upload a Build Artifact	
      uses: actions/upload-artifact@v2.0.1
      env:
        TIME: ${{ steps.current-time.outputs.time }}
      with:	
        # Artifact name	
        name: build/libs/JARM-{{ steps.my-project-build-number.outputs.build-number }}.jar
        # A file, directory or wildcard pattern that describes what to upload	
        path: build/libs/JARM-{{ steps.my-project-build-number.outputs.build-number }}.jar
        
    - name: Upload to curseforge
      env:
        TIME: ${{ steps.current-time.outputs.time }}
      uses: itsmeow/curseforge-upload@master
      with:
        token: ${{ secrets.CF_API_KEY }}
        project_id: 385265
        game_endpoint: minecraft
        file_path: build/libs/JARM-{{ steps.my-project-build-number.outputs.build-number }}.jar
        changelog: updated mod, changelog on github
        display_name: JARM
        game_versions: 1.15.2,Java 8,Forge
        release_type: alpha
        
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: build/libs/
        asset_name: JARM-{{ steps.my-project-build-number.outputs.build-number }}.jar
        asset_content_type: application/zip

